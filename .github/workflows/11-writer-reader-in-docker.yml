name: D-11 Writer-reader
on:
  push:
    paths: 
      - 'docker/11-writer-reader-in-docker/**'
      - '.github/workflows/11-writer-reader-in-docker.yml'  
env:
  READER_CONTAINER_OUTPUT: "Hello World !!!"
  READER_CONTAINER_STATUS: "exited"
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Print current path
      run: |
           echo ${{ github.workspace }}
           
    - name: Check working directory 
      run: | 
        pwd
        if [ -d "${{ github.workspace }}/docker/11-writer-reader-in-docker" ]; then
        echo "Directory exists"
        else
        echo "Directory does not exist"
        exit 1
        fi   
    
    - name: Check docker available
      run: docker info       
    
    - name: Check if src directory is
      run: |
        if [ -d "./docker/11-writer-reader-in-docker/src" ]; then
        echo "Directory 'src' exists"
        else 
        echo "Error: Directory 'src' does not exist"
        exit 1
        fi
    
    - name: Check if src directory has Dockerfile file 
      run: |
        if [ -f "./docker/11-writer-reader-in-docker/src/Dockerfile" ]; then
        ls ./docker/11-writer-reader-in-docker/src
        echo "Dockerfile exists inside 'src' "
        else
        echo "Error: Dockerfile does not exist inside 'src' "
        exit 1
        fi
    
    - name: Build Docker image. Check if image was created successfully
      run: |
        docker build -t 11-writer-reader-in-docker:0.1 ./docker/11-writer-reader-in-docker/src
        docker images | grep 11-writer-reader-in-docker
        if [ $? -eq 0 ]; then
        echo "Image "11-writer-reader-in-docker:0.1" was created"
        else exit 1
        fi 
        
    - name: Run 11-writer-reader-in-docker:0.1
      run: |
         OUTPUT=$(docker run --name 11-task 11-writer-reader-in-docker:0.1)
         STATUS=$(docker inspect -f '{{ .State.Status }}' 11-task )
         echo "CONTAINER_STATUS=${STATUS}" >> $GITHUB_ENV
         echo "OUTPUT=${OUTPUT}" >> $GITHUB_ENV
    
    - name: Check container output
      run: |
        if [[ "${{ env.OUTPUT }}" != "${{ env.READER_CONTAINER_OUTPUT }}" ]]; then
        echo "Unexpected output: ${{ env.OUTPUT }}"
        exit 1
        fi
        echo "Output: ${{ env.OUTPUT }}"
    
    - name: Check container status    
      run: |
        if [[ "${{ env.CONTAINER_STATUS }}" != "${{ env.READER_CONTAINER_STATUS }}" ]]; then
        echo "Container did not exit successfully. Status: ${{ env.CONTAINER_STATUS }}"
        exit 1
        fi
