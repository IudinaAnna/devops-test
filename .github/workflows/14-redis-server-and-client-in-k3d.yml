name: K-14 Redis Server and Client in K3D

on:
  push:
    paths:
      - '.github/workflows/14-redis-server-and-client-in-k3d.yml'
      - 'kubernetes/14-redis-server-and-client-in-k3d/**'
env:
  BUILD_USER_ID: "$(id -u)"
  BUILD_GROUP_ID: "$(id -g)"
  EXPECTED_OUTPUT: "Anna"
  WORK_PATH: "${{ github.workspace }}/kubernetes/14-redis-server-and-client-in-k3d"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version

      - name: Install redis
        run: |
          sudo apt update
          sudo apt install redis

      - name: Create report folder and check if it was created successfully
        run: |
          mkdir ${WORK_PATH}/data
          if [ -d ${WORK_PATH}/data ]; then
          echo "Report folder was created successfully"
          ls ${WORK_PATH}
          else
          echo "Report folder wasn't created"
          exit 1
          fi

      - name: Create cluster with registry
        run: |
          k3d cluster create demo-cluster \
          --registry-create demo-registry:12345 \
          --volume ${WORK_PATH}/data:/data

      - name: Build, tag and push the image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORK_PATH }}/src
          file: ${{ env.WORK_PATH }}/src/Dockerfile
          push: true
          tags: localhost:12345/14-redis-server-and-client-in-k3d:0.1
          build-args: |
            BUILD_USER_ID=$(id -u)
            BUILD_GROUP_ID=$(id -g)

      - name: Apply manifests
        run: |
          kubectl apply -f ${WORK_PATH}/manifests

      - name: Check if dump.rdb file was created successfully
        run: ./wait_status_code_and_logs.sh  'cat ${WORK_PATH}/data/dump.rdb'

      - name: Get the key
        run: |
          docker run -d --name my-redis-container redis:alpine3.18
          docker stop my-redis-container
          docker cp ${{ github.workspace }}/kubernetes/14-redis-server-and-client-in-k3d/data/dump.rdb my-redis-container:/data
          docker start my-redis-container
          GET_KEY=$(docker exec -i my-redis-container redis-cli get name)
          echo "GET_KEY=${GET_KEY}" >> $GITHUB_ENV

      - name: Check the key value. Expected key value - Anna
        run: |
          echo "Get key value: $GET_KEY"
          if [[ "${{ env.GET_KEY }}" == "${{ env.EXPECTED_OUTPUT }}" ]]; then
          echo "Key value is correct"
          else
          echo "Key value is incorrect"
          exit 1
          fi
