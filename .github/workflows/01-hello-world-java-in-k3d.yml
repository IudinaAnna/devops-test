name: K-01 HelloWorld Java In K3d
on:
  push:
    paths: 
      - 'kubernetes/01-hello-world-java-in-k3d/**'
      - '.github/workflows/01-hello-world-java-in-k3d.yml'  
env:
  CHECK_POD_STATUS: "Running"
  POD_OUTPUT: "hello world!!!"
  TASK_FOLDER: "${{ github.workspace }}/kubernetes/01-hello-world-java-in-k3d"
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup k3d
      uses: nolar/setup-k3d-k3s@v1

    - name: Check docker available
      run: docker info
   
    - name: Check if kubernetes is available
      run: k3d version
    
    - name: Check if src directory exists
      run: |
        if [ -d ${TASK_FOLDER}/src ]; then
        echo "Directory 'src' exists"
        else 
        echo "Error: Directory 'src' does not exist"
        exit 1
        fi
    
    - name: Check if manifests folder exists
      run: |
        if [ -d ${TASK_FOLDER}/manifests ]; then
        echo "Directory 'manifests' exists"
        else 
        echo "Error: manifests does not exist"
        exit 1
        fi
    
    - name: Check if src directory contains Dockerfile, .java and .txt files
      run: |
        if [ -f ${TASK_FOLDER}/src/Dockerfile ] || \
        [ -n "$(find ${TASK_FOLDER}/src -name '*.java' -type f)" ] || \
        [ -n "$(find ${TASK_FOLDER}/src -name '*.txt' -type f)" ]; then
        ls ${TASK_FOLDER}/src
        echo "All files exist inside 'src' "
        else
        echo "Error: Files does not exist inside 'src' "
        exit 1
        fi
        
    - name: Check if manifests directory contains pod.yml file
      run: |
        if [ -f ${TASK_FOLDER}/manifests/pod.yml ]; then
        ls ${TASK_FOLDER}/manifests
        echo "All files exist inside 'manifests' "
        else
        echo "Error: Files does not exist inside 'manifests' "
        exit 1
        fi

    - name: Create cluster
      run: |
        k3d cluster create demo-cluster --registry-create demo-registry:12345 

    - name: Build, tag and push the image
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.TASK_FOLDER }}/src
        file: ${{ env.TASK_FOLDER }}/src/Dockerfile
        push: true
        tags: localhost:12345/01-hello-world-java-in-k3d:0.1

    - name: Check if tagged image was created successfully 
      run: |
        TAGGED_IMAGE=$(docker images -q localhost:12345/01-hello-world-java-in-k3d:0.1)
        if [ -n "$TAGGED_IMAGE" ]; then
        echo "Image localhost:12345/01-hello-world-java-in-k3d:0.1 exists"
        else
        echo "Image localhost:12345/01-hello-world-java-in-k3d:0.1 does not exist"
        exit 1
        fi
        
    - name: Apply manifest 
      run: |
        kubectl apply -f ${TASK_FOLDER}/manifests
        POD_NAME="01-hello-world-java"
        kubectl wait pod $POD_NAME --for=condition=Ready --timeout=30s
        POD_STATUS=$(kubectl get pod 01-hello-world-java -o jsonpath='{.status.phase}')
        echo "POD_STATUS=${POD_STATUS}" >> $GITHUB_ENV
    
    - name: Check if Pod logs present
      run: |
        OUTPUT=$(kubectl logs 01-hello-world-java -c 01-hello-world-java)
        echo "OUTPUT=${OUTPUT}" >> $GITHUB_ENV
        echo "OUTPUT=${OUTPUT}"

    - name: Verify pod status
      run: |
        if [ "${{ env.POD_STATUS }}" == "${{ env.CHECK_POD_STATUS }}" ]; then
        echo "Pod is running successfully"
        else
        echo "Error: Pod is not running"
        exit 1
        fi

    - name: Verify output
      run: |
        if [[ "${{ env.OUTPUT }}" == "${{ env.POD_OUTPUT }}" ]]; then
        echo "Log output contains 'hello world!!!'"
        else
        echo "Error: Log output does not contain 'hello world!!!'"
        exit 1
        fi

    - name: Check if pod did not restart
      run: |
        RESTARTS=$(kubectl describe pod 01-hello-world-java | grep -i 'restart count' | grep -o -E '[0-9]{0,2}' | awk '{s+=$1} END {print s}')
        echo "Restart count: $RESTARTS"
        if [ "$RESTARTS" -gt 0 ]; then
        echo "Error: Pod restarted $RESTARTS times."
        exit 1
        fi    

