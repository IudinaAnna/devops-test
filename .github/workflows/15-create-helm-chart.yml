name: K-15 Create Helm Chart

on:
  push:
    paths:
      - '.github/workflows/15-create-helm-chart.yml'
      - 'kubernetes/15-create-helm-chart/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Print current path
        run: |
          echo ${{ github.workspace }}

      - name: Check working directory
        run: |
          if [ -d "${{ github.workspace }}/kubernetes/15-create-helm-chart" ]; then
          echo "Directory exists"
          else
          echo "Directory does not exist"
          exit 1
          fi

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version
      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive submodules/springboot-api-rest-example
          cp -r ./submodules/springboot-api-rest-example ./kubernetes/15-create-helm-chart
          if [ -d "./kubernetes/15-create-helm-chart/springboot-api-rest-example" ]; then
          echo "Submodule directory exists"
          else
          echo "Submodule directory does not exist"
          exit 1
          fi

      - name: Create cluster with registry
        run: k3d cluster create demo-cluster --registry-create demo-registry:12345

      - name: Build, tag and push springboot
        run: |
          cd "${{ github.workspace }}/kubernetes/15-create-helm-chart/springboot-api-rest-example/api"
          DOCKER_BUILDKIT=1 docker build -f ./docker/Dockerfile.prod -t spring-boot-app:0.1 .
          docker tag spring-boot-app:0.1 localhost:12345/spring-boot-app:0.1
          docker push localhost:12345/spring-boot-app:0.1

      - name: Install helm chart `my-chart`
        run: |
          helm upgrade --install --cleanup-on-fail my-chart \
          ./kubernetes/15-create-helm-chart/my-chart --namespace test --create-namespace \
          --set service.type=LoadBalancer --wait

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3.11

      - name: Forward the host ports by spring-boot and pgadmin to the ports, which are listening by the services
        run: |
          k3d cluster edit demo-cluster --port-add 18999:8099@loadbalancer
          k3d cluster edit demo-cluster --port-add 16999:8080@loadbalancer

      - name: Check HTTP status of pgadmin and springboot sites
        uses: lakuapik/gh-actions-http-status@v1
        with:
          sites: '["http://localhost:18999/app", "http://localhost:16999/login"'
          expected: '[200, 200]'

      - name: verify that the connection to postgres is successful
        run: |
          sudo apt update
          sudo apt install postgresql
          psql -h localhost -U md_aiudina -d check-db