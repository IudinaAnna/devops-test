name: D-09 Node Testcontainers
on:
  push:
    paths:
      - './docker/09-node-testcontainers/**'
      - '.github/workflows/09-node-testcontainers.yml'

env:
  BUILD_ARGUMENT_USER_ID: "$(id -u)"
  BUILD_ARGUMENT_GROUP_ID: "$(id -g)"
  BUILD_IMAGE: "09-node-testcontainers:0.1"
  DIND_CONTAINER_STATUS: "running"
  TASK_FOLDER: "${{ github.workspace }}/docker/09-node-testcontainers"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Check docker available
        run: docker info

      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive submodules/testcontainers-node
          cp -r ./submodules/testcontainers-node ${TASK_FOLDER}/src/
          if [ -d ${TASK_FOLDER}/src/testcontainers-node ]; then
          echo "Submodule directory exists"
          else
          echo "Submodule directory does not exist"
          exit 1
          fi

      - name: Create network. Check if network was created successfully.
        run: |
          docker network create demo-network
          docker network ls | grep demo-network
          if [ $? -eq 0 ]; then
          echo " "demo-network" network was created"
          fi

      - name: Run dind container. Check if dind container was created successfully.
        run: |
          docker run --privileged -d -p 12383:2375 --name dind \
          -e DOCKER_TLS_CERTDIR="" --network demo-network docker:23.0.1-dind

          docker ps -a
          docker ps -a | grep dind
          if [ $? -eq 0 ]; then
          echo "Dind container was created"
          fi
          STATUS=$(docker inspect -f '{{ .State.Status }}' dind )
          echo "DIND_STATUS=${STATUS}" >> $GITHUB_ENV

      - name:  Check dind container status
        run: |
          if [[ "${{ env.DIND_STATUS }}" != "${{ env.DIND_CONTAINER_STATUS }}" ]]; then
          echo "Containers did not exit successfully"
          exit 1
          fi
          echo "Dind container is running"

      - name: Build Docker image. Check if image was created successfully.
        run: |
          docker build -t 09-node-testcontainers:0.1 --build-arg USER_ID=${{ env.BUILD_ARGUMENT_USER_ID }}  \
          --build-arg GROUP_ID=${{ env.BUILD_ARGUMENT_GROUP_ID }} \
          ${TASK_FOLDER}/src/

          docker images
          docker images | grep 09-node-testcontainers
          if [ $? -eq 0 ]; then
          echo "Image was created"
          fi 

      - name: Create report folder. Check if report folder was created successfully.
        run: |
          mkdir ${TASK_FOLDER}/report
          if [ -d ${TASK_FOLDER}/report ]; then
          echo "Report folder exist"
          else
          echo "Report folder does not exist"
          exit 1
          fi

      - name: Run "testcontainer-node" container
        run: |
          docker run --name testcontainer-node --rm \
          --mount type=bind,source=${TASK_FOLDER}/report,target=/app/report \
          --network demo-network  09-node-testcontainers:0.1

      - name: Check if report is available in the report folder
        run: |
          ls -lha ${TASK_FOLDER}/report/node
          if [ -f ${TASK_FOLDER}/report/node/index.html ]; then
          echo "Report exist"
          cat ${TASK_FOLDER}/report/node/index.html
          else
          echo "Report does not exist"
          exit 1
          fi

      - name: Check build status. Check if number of passed tests equal 4
        run: |
          PASSED=$(grep -oP '(?<=<div class="summary-total">Tests \(4\)</div><div class="summary-passed ">)[0-9]+(?= passed</div>)' ${TASK_FOLDER}/report/node/index.html)
          echo "Tests Passed: $PASSED"
          if [ "$PASSED" -eq 4 ]; then
          echo "There are 4 passed tests"
          else
          echo "Error. Tests do not match the expected results. Number of passed test=$PASSED"
          exit 1
          fi

      - name: Check report folder rights
        run: |
          USER=$(stat -c '%U' ${TASK_FOLDER}/report)
          GROUP=$(stat -c '%G' ${TASK_FOLDER}/report)
          if [[ "$USER" == "$(id -un)" && "$GROUP" == "$(id -gn)" ]]; then
          echo "User=$USER, $(id -un)"
          echo "Group=$GROUP, $(id -gn)" 
          else
          echo "Error: user and group are incorrect"
          exit 1
          fi 
