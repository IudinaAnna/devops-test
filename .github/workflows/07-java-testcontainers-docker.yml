name: D-07 Java Testcontainers

on:
  push:
    paths:
      - 'docker/07-java-testcontainers/**'
      - '.github/workflows/07-java-testcontainers-docker.yml'
env: 
  BUILD_ARGUMENT_USER_ID: "$(id -u)"
  BUILD_ARGUMENT_GROUP_ID: "$(id -g)"
  BUILD_IMAGE: "07-java-testcontainers:0.1"
  DIND_CONTAINER_STATUS: "running"
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print current path
        run: |
           echo ${{ github.workspace }}
           
      - name: Check if directory
        run: |
          if [ -d "${{ github.workspace }}/docker/07-java-testcontainers" ]; then
          echo "Directory exists"
          else
          echo "Directory does not exist"
          exit 1
          fi
          
      - name: Check docker available
        run: docker info
             
      - name: Initialize and update submodule. Verify is submodule directory was added successfully.
        run: |
          git submodule update --init --recursive submodules/testcontainers-java
          cp -r ./submodules/testcontainers-java ./docker/07-java-testcontainers/src
          if [ -d "./docker/07-java-testcontainers/src/testcontainers-java" ]; then
          echo "Submodule directory exists"
          else
          echo "Submodule directory does not exist"
          exit 1
          fi
          
      - name: Create network. Check if network was created
        run: |
          docker network create demo-network
          docker network ls | grep demo-network
          if [ $? -eq 0 ]; then
          echo " "demo-network" network was created"
          fi
          
      - name: Run dind container
        run: |
          docker run --privileged -d -p 12380:2375 --name dind -e DOCKER_TLS_CERTDIR="" --network demo-network docker:23.0.1-dind
          STATUS=$(docker inspect -f '{{ .State.Status }}' dind )
          echo "CONTAINER_STATUS=${STATUS}" >> $GITHUB_ENV
          
      - name: Check dind container status
        run: |
          if [[ "${{ env.CONTAINER_STATUS }}" != "${{ env.DIND_CONTAINER_STATUS }}" ]]; then
          echo "Containers did not exit successfully"
          exit 1
          fi
          
      - name: Build Docker image
        run: |
          docker build -t 07-java-testcontainers:0.1 --build-arg USER_ID=${{ env.BUILD_ARGUMENT_USER_ID }} --build-arg GROUP_ID=${{ env.BUILD_ARGUMENT_GROUP_ID }} ./docker/07-java-testcontainers/src/
      
      - name: Verify if image was created successfully.
        run: |
          docker images
          docker images | grep 07-java-testcontainers
          if [ $? -eq 0 ]; then
          echo "Image was created"
          else 
          exit 1
          fi
          
      - name: Create report folder and check if folder was created succeessfully.
        run: |
          mkdir ${{ github.workspace }}/docker/07-java-testcontainers/report
          if [ -d "${{ github.workspace }}/docker/07-java-testcontainers/report" ]; then
          echo "Report folder exist"
          cd ./docker/07-java-testcontainers
          ls
          else
          echo "Report folder does not exist"
          exit 1
          fi
          
      - name: Run "testcontainers-java" container
        run: |
          docker run --name testcontainer-java --rm --mount type=bind,source=${{ github.workspace }}/docker/07-java-testcontainers/report,destination=/app/examples/redis-backed-cache-testng/build --network demo-network  07-java-testcontainers:0.1  > 07-task-logs.txt
          BUILD_OUTPUT=$(grep "BUILD SUCCESSFUL" 07-task-logs.txt)
          echo "BUILD_OUTPUT=${BUILD_OUTPUT}" >> $GITHUB_ENV
          cat 07-task-logs.txt
          
      - name: Check container output. Extract build output and check if output is "BUILD SUCCESSFUL"
        run: |
          if [[ "${{ env.BUILD_OUTPUT }}" == *"BUILD SUCCESSFUL"* ]]; then
          echo "The build is successful"
          else
          echo "The build is failed"
          exit 1
          fi
          
      - name: Check if report is available in the report folder an report file exist
        run: |
          cd ${{ github.workspace }}/docker/07-java-testcontainers/report
          ls -lha
          if [ -d "${{ github.workspace }}/docker/07-java-testcontainers/report" ]; then
          echo "Report exist"
          cat ${{ github.workspace }}/docker/07-java-testcontainers/report/reports/tests/test/index.html
          else
          echo "Report does not exist"
          exit 1
          fi
          
      - name: Check report folder rights
        run: |
          folder_path="${{ github.workspace }}/docker/07-java-testcontainers/report"
          user=$(stat -c '%U' $folder_path)
          group=$(stat -c '%G' $folder_path)
          if [[ "$user" == "$(id -un)" && "$group" == "$(id -gn)" ]]; then
          echo "User=$user, $(id -un)"
          echo "Group=$group, $(id -gn)" 
          else
          echo "Error: user and group are incorrect"
          exit 1
          fi
