name: D-10 Redis Server and Client in Docker

on:
  push:
    paths:
      - 'docker/10-redis-server-and-client-in-docker/**'
      - '.github/workflows/10-redis-server-and-client-in-docker.yml'

env:
  BUILD_USER_ID: "$(id -u)"
  BUILD_GROUP_ID: "$(id -g)"
  EXPECTED_OUTPUT: "Anna"
  CONTAINER_STATUS: "running"
  REPORT_FOLDER: "${{ github.workspace }}/docker/10-redis-server-and-client-in-docker/report"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify Docker installation
        run: docker version

      - name: Print current path
        run: |
          echo ${{ github.workspace }}

      - name: Check if directory
        run: |
          if [ -d "${{ github.workspace }}/docker/10-redis-server-and-client-in-docker" ]; then
          echo "Directory exists"
          else
          echo "Directory does not exist"
          exit 1
          fi

      - name: Create network
        run: |
          docker network create redisNetwork
          docker network ls | grep redisNetwork
          if [ $? -eq 0 ]; then
          echo " "redisNetwork" network was created successfully"
          fi

#       - name: Setup tmate session
#         uses: mxschmitt/action-tmate@v3.11
      
      - name: Create report folder and check if it was successfully created
        run: |
          mkdir $REPORT_FOLDER
          if [ -d "${{ github.workspace }}/docker/10-redis-server-and-client-in-docker/report" ]; then
          echo "Data folder was created"
          ls ./docker/10-redis-server-and-client-in-docker
          else
          echo "Data folder is not created"
          exit 1
          fi

      - name: Build, tag and push the image
        run: |
          docker build -t 10-redis-client-and-server-in-docker:0.1  \
          --build-arg USER_ID=${{ env.BUILD_USER_ID }} \
          --build-arg GROUP_ID=${{ env.BUILD_GROUP_ID }} \
          ./docker/10-redis-server-and-client-in-docker/src

      - name: Run redis-server
        run: |
          docker run -d --name redis-server --network redisNetwork \
          --mount type=bind,source=${{ github.workspace }}/docker/10-redis-server-and-client-in-docker/report,target=/data \
          10-redis-client-and-server-in-docker:0.1 
          
          SERVER_STATUS=$(docker inspect -f '{{ .State.Status }}' redis-server )
          echo "SERVER_STATUS=${SERVER_STATUS}" >> $GITHUB_ENV
      
      - name: Check redis-server container status
        run: |
          if [[ "${{ env.SERVER_STATUS }}" == "${{ env.CONTAINER_STATUS }}" ]]; then
          echo "Container is running"
          else
          echo "Container exited"
          exit 1
          fi

      - name: Run redis-client
        run: |
          docker run -d --name redis-client --network redisNetwork redis 
          CLIENT_STATUS=$(docker inspect -f '{{ .State.Status }}' redis-client )
          echo "CLIENT_STATUS=${CLIENT_STATUS}" >> $GITHUB_ENV
      
      - name: Check redis-server container status
        run: |
          if [[ "${{ env.CLIENT_STATUS }}" == "${{ env.CONTAINER_STATUS }}" ]]; then
          echo "Container is running"
          else
          echo "Container exited"
          exit 1
          fi

      - name: Set key using Redis CLI
        run: echo -e "SET name \"Anna\"\nSAVE" | docker exec -i redis-client redis-cli -h redis-server

      - name: Check if dump.rdb file was created successfully
        run: ./check_exit_code_and_logs.sh  'cat $REPORT_FOLDER/dump.rdb'

      - name: Get the key
        run: |
          docker run -d --name my-redis-container redis:alpine3.18
          docker cp ${{ env.REPORT_FOLDER }}/dump.rdb my-redis-container:/data
          docker stop my-redis-container
          docker start my-redis-container
          GET_KEY=$(docker exec -i my-redis-container redis-cli get name)
          echo "GET_KEY=${GET_KEY}" >> $GITHUB_ENV

      - name: Check the key value. Expected value - Anna
        run: |
          if [[ "${{ env.GET_KEY }}" == "${{ env.EXPECTED_OUTPUT }}" ]]; then
          echo "The key is correct"
          else
          echo "The key is incorrect"
          exit 1
          fi

      - name: Check report folder rights
        run: |
          folder_path="${{ github.workspace }}/docker/10-redis-server-and-client-in-docker/report"
          user=$(stat -c '%U' $folder_path)
          group=$(stat -c '%G' $folder_path)
          if [[ "$user" == "$(id -un)" && "$group" == "$(id -gn)" ]]; then
          echo "User=$user, $(id -un)"
          echo "Group=$group, $(id -gn)"
          else
          echo "Error: user and group are incorrect"
          exit 1
          fi
