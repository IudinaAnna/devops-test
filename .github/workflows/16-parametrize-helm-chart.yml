name: K-16 Parametrize Helm Chart

on:
  push:
    paths:
      - '.github/workflows/16-parametrize-helm-chart.yml'
      - 'kubernetes/16-parametrize-helm-chart/**'
env:
  SPRINGBOOT_PORT: "8002"
  PGADMIN_PORT: "8001"
  PSQL_PORT: "6432"
  WORK_FOLDER: "${{ github.workspace }}/kubernetes/16-parametrize-helm-chart"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Install PSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          psql --version

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version

      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive submodules/springboot-api-rest-example
          cp -r ./submodules/springboot-api-rest-example ${WORK_FOLDER}
          if [ -d ${WORK_FOLDER}/springboot-api-rest-example ]; then
          echo "Submodule directory exists"
          else
          echo "Submodule directory does not exist"
          exit 1
          fi

      - name: Create cluster with registry
        run: |
          k3d cluster create demo-cluster \
          --registry-create demo-registry:12345 \
          -p ${{ env.PGADMIN_PORT }}:8081@loadbalancer \
          -p ${{ env.SPRINGBOOT_PORT }}:8080@loadbalancer \
          -p ${{ env.PSQL_PORT }}:6432@loadbalancer

      - name: Build, tag and push the image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORK_FOLDER }}
          file: ${{ env.WORK_FOLDER }}/springboot-api-rest-example/api/docker/Dockerfile.prod
          push: true
          tags: localhost:12345/spring-boot-app:0.1
          build-args: |
            USER_ID=$(id -u)
            GROUP_ID=$(id -g)

      - name: Install helm chart `my-chart` for prodaction version - without pgadmin
        run: |
          helm upgrade --install --cleanup-on-fail my-chart \
          ${WORK_FOLDER}/my-chart --namespace test --create-namespace \
          --set service.type=LoadBalancer --wait \
          --set pgadmin.enabled=false

      - name: Verify that the connection to postgres is successful
        run: ./wait_status_code_and_logs.sh 'psql postgresql://md_aiudina:123@localhost:${{ env.PSQL_PORT}}/check-db'

      - name: Verify that the connection to postgres is successful (another way)
        run: ./wait_status_code_and_logs.sh 'pg_isready -h localhost -p 6432'

      - name: Check springboot site for status code
        uses: pavelsaman/website-check@v2.3
        with:
          url: http://localhost:${{ env.SPRINGBOOT_PORT }}/app
          status_code: 200
          redirect: true

      - name: Check if pgAdmin is not present
        run: |
          DEPLOYMENTS=$(kubectl get deployments -n test -o name)
          if ! echo "DEPLOYMENTS" | grep -q "deployment/pgadmin"; then
          echo "Deployment is not present in the namespace."
          else
          echo "Deployment is present in the namespace."
          exit 1
          fi
  
